========================================
对象头Mark
----------------------------------------
Mark Word,对象头的标记,32位
描述对象的hash、锁信息,垃圾回收标记,年龄
- 指向锁记录的指针
- 指向monitor的指针
- GC标记
- 偏向锁线程ID

偏向锁：BiasLock002.java
-----------------------------------------
■大部分情况是没有竞争的,所以可以通过偏向来提高性能
■所谓的偏向,就是偏心,即锁会偏向于当前已经占有锁的线程
（解释：如果线程已经占有这个锁了，当它再试图获得这个锁的时候，就会以最快的方式拿到这个锁，这样可以提升性能）
（为什么有偏向锁产生？因为在大部分程序里面，普遍让认为，大部分情况下，是没有锁竞争的，也就是说锁竞争的场合并不多见，因此，大部分情况没有锁竞争，锁在这里就是没用的，因此可以使用偏向来提高性能）
■将对象头Mark的标记设置为偏向,并将线程ID写入对象头Mark
■只要没有竞争,获得偏向锁的线程,在将来进入同步块,不需要做同步
■当其他线程请求相同的锁时,偏向模式结束
■-XX:+UseBiasedLocking
- 默认启用
■在竞争激烈的场合,偏向锁会增加系统负担
（刚拿到偏向锁，这个偏向模式就宣告结束类了，这个偏向锁就没有用了，偏向锁的操作就白做了，因此对性能反而是有负面影响的）

代码：
package com.zt.lock;

/**
 * 偏向锁
 */
import java.util.List;
import java.util.Vector;

public class BiasLock002 {
	//vector内部是有synchronize操作的，add时候会有锁操作的，虽然看起没有锁操作，实际上在JDK是有的
	public static List<Integer> numberList = new Vector<Integer>();

	public static void main(String[] args) throws InterruptedException {
		long begin = System.currentTimeMillis();
		int count = 0;
		int startnum = 0;
		while (count < 10000000) {
			numberList.add(startnum);//add时候是有锁操作的
			startnum += 2;
			count++;
		}
		long end = System.currentTimeMillis();
		System.out.println(end - begin);

	}
}
//用下面两种方式去执行：性能有5%的差别
//第一种：使用偏向锁-因为系统在启动时，锁竞争往往是很激烈的，所以系统刚启动的前几秒可能不会开启偏向锁（索静正激烈，用偏向锁反而会损耗性能，详细见001），因为当前启动时间肯定很短，根本 用不了几秒钟，因此这里参数设置为0，可以让程序启动的当时就启用偏向锁
//-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0
//执行结果 2896
//第二种：不适用偏向锁
//-XX:-UseBiasedLocking
//执行结果：3063
========================================
